@using SawyerSight.Models.ViewModel;
@using SawyerSight.Web.Models;
@using SawyerSight.Models.DAL;
@{
    ViewBag.Title = "Trial Balance Cost Accounts";
}
<br />
<div class="row" id="boxesDiv">
    @Html.Partial("/Views/Shared/_ClientProjectCards.cshtml")
</div>
<br />

<h4>Create Waterfall Categories and the Associated Trial Balance Accounts</h4>
<br />
@using (Html.BeginForm("TrialBalanceCosts", "Waterfall", FormMethod.Post, new { @style = "width:100%;", @id = "accountsForm" }))
{

    <div class="row">
        <div class="col-4">
            Account Groups (ACCT_ID starts with):
        </div>
        <div class="col-8">
            @(Html.Kendo().DropDownTree()
                .AutoWidth(true)
                .Name("startsWith")
                .DataTextField("Name")
                .DataValueField("Id")
                .HtmlAttributes(new { style = "width: 100%" })
                .Events(ev => ev.Change("refreshGrid"))
                .CheckAll(true)
                .AutoClose(false)
                .Checkboxes(checkboxes => checkboxes
                    .Name("checkedItems")
                    .CheckChildren(true)
                )
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("FilterTrialBalanceAccounts_ID", "Waterfall");
                    });
                })
            )
        </div>
    </div>
    <br />
    <div class="row">
        @(Html.Kendo().Grid<Account>()
            .Name("accountsGrid")
            .NoRecords(rec => rec.Template("Please select Account Categories from the menu above to see the Accounts here"))
            .Columns(columns =>
            {
            //when ServerOperations of the Grid is enabled, dataSource should be provided for all the Filterable Multi Check columns
            columns.Bound(e => e.Id);
            columns.Bound(e => e.Name);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' data-selector='Column1' data-item='#= Id #' name='#= Id #' value='#= Id #-Cost1' onClick='SelectListChildren(this)' /></div>").HeaderTemplate(@<text><input id="txtDirectCost" name="txtDirectCost" class="form-control-sm" style="color:red; width:125px" type="text" value="Direct Labor" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' data-selector='Column2' data-item='#= Id #' name='#= Id #' value='#= Id #-Cost2' onClick='SelectListChildren(this)' /></div>").HeaderTemplate(@<text><input id="txtSubcontractorCost" name="txtSubcontractorCost" class="form-control-sm" style="color:red; width:125px" type="text" value="Subcontractor Labor" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' data-selector='Column3' data-item='#= Id #' name='#= Id #' value='#= Id #-Cost3' onClick='SelectListChildren(this)' /></div>").HeaderTemplate(@<text><input id="txtCustomCost1" name="txtCustomCost1" class="form-control-sm" style="color:red; width:125px" type="text" value="Other Direct Cost" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' class='hidden-element' data-item='#= Id #' data-selector='Column4' name='#= Id #' value='#= Id #-Cost4' onClick='SelectListChildren(this)' /></div>").HeaderTemplate(@<text><input id="txtCustomCost2" name="txtCustomCost2" class="form-control-sm" style="color:red; width:125px" type="text" data-item="1" onchange="AddColumn(this, 6)" placeholder="Other Direct Cost" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' class='hidden-element' data-item='#= Id #' data-selector='Column5' name='#= Id #' value='#= Id #-Cost5' onClick='SelectListChildren(this)' /></div>").Hidden(true).HeaderTemplate(@<text><input id="txtCustomCost3" name="txtCustomCost3" class="form-control-sm" style="color:red; width:125px" type="text" data-item="2" onchange="AddColumn(this, 7)" placeholder="Other Direct Cost" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' class='hidden-element' data-item='#= Id #' data-selector='Column6' name='#= Id #' value='#= Id #-Cost6' onClick='SelectListChildren(this)' /></div>").Hidden(true).HeaderTemplate(@<text><input id="txtCustomCost4" name="txtCustomCost4" class="form-control-sm" style="color:red; width:125px" type="text" data-item="3" onchange="AddColumn(this, 8)" placeholder="Other Direct Cost" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' class='hidden-element' data-item='#= Id #' data-selector='Column7' name='#= Id #' value='#= Id #-Cost7' onClick='SelectListChildren(this)' /></div>").Hidden(true).HeaderTemplate(@<text><input id="txtCustomCost5" name="txtCustomCost5" class="form-control-sm" style="color:red; width:125px" type="text" data-item="4" onchange="AddColumn(this, 9)" placeholder="Other Direct Cost" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><input type='radio' class='hidden-element' data-item='#= Id #' data-selector='Column8' name='#= Id #' value='#= Id #-Cost8' onClick='SelectListChildren(this)' /></div>").Hidden(true).HeaderTemplate(@<text><input id="txtCustomCost6" name="txtCustomCost6" class="form-control-sm" style="color:red; width:125px" type="text" data-item="5" placeholder="Other Direct Cost" onchange="VisibleColumn(this,10)" /></text>);
            columns.Bound(e => e.Id).ClientTemplate("<div align=center><button type='button' class='btn btn-sm resetButton' reset-value='#= Id #' onClick='ResetThis(this)'>Exclude</button></div>").HeaderTemplate(@<text></text>);
            }).DataSource(dataSource => dataSource.Ajax().Read(read => read.Action("TrialBalanceAccountsTree_Read", "Waterfall")))
            .Scrollable()
        )
    </div>
    <br />
    <div class="form-group row center-elements">
        <button onclick="SubmitCosts();return false;" class="btn btn-lg red-button"><small>SAVE SELECTIONS AND CONTINUE  <i class="fas fa-arrow-right"></i></small></button>
    </div>
    <div class="form-group row center-elements">
        <a href="@Url.Action("SelectClient")" class="btn btn-lg gray-button"><small>CANCEL THIS REQUEST AND EXIT</small></a>
    </div>
    <br />
}
<style>
    .k-button {
        width: 100px;
    }
</style>
<script>
    var costsNames = {};

    function ResetThis(obj) {
        var radio = obj.getAttribute("reset-value");
        var myRadios = document.getElementsByName(radio);
        var setCheck;
        var x = 0;
        for (x = 0; x < myRadios.length; x++) {
            myRadios[x].checked = false;
            myRadios[x].onclick = function () {
                if (setCheck != this) {
                    setCheck = this;
                } else {
                    this.checked = false;
                    setCheck = null;
                }
            };

        }
    }

    // function that gathers IDs of checked nodes
    function checkedNodeIds(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i].Id);
            }
        }
    }

    function AddColumn(textbox, index) {
        var grid = $("#accountsGrid").data("kendoGrid");
        var textboxId = $(textbox).attr('id');
        var elementSelector = 'Column' + (index - 2);
        if ($(textbox).val() == '') {
            var currentId = $(textbox).attr("data-item");
            nextId = parseInt(currentId) + 1;
            if ($('[data-item="' + nextId + '"').length > 0 && $('[data-item="' + nextId + '"').first().val() != '') {
                alert('You first must delete the last custom category');
                $(textbox).val(costsNames[textboxId]);
                return;
            }
            $('[data-selector="' + elementSelector + '"').addClass("hidden-element");
            grid.hideColumn(index);
            $('[data-selector="' + elementSelector + '"').each(function () {
                $(this).prop("checked", false);
            });
        }
        else {
            costsNames[textboxId] = $(textbox).val();
            grid.showColumn(index);
            $('[data-selector="' + elementSelector + '"').removeClass("hidden-element");
        }
    }

    function SelectListChildren(radioelement) {
        var currentColumn = $(radioelement).attr("data-selector");
        var currentId = $(radioelement).attr("data-item");
        $('[data-selector="' + currentColumn + '"').each(function () {
            if ($(this).attr("data-item").startsWith(currentId)) {
                $(this).prop("checked", true);
                console.log($(this).attr("data-item"));
            }
        });
    }

    function VisibleColumn(textbox, index) {
        var elementSelector = 'Column' + (index - 2);
        if ($(textbox).val() == '') {
            $('[data-selector="' + elementSelector + '"').addClass("hidden-element");
            $('[data-selector="' + elementSelector + '"').each(function () {
                $(this).prop("checked", false);
            });
        }
        else {
            $('[data-selector="' + elementSelector + '"').removeClass("hidden-element");
        }
       
    }

    function refreshGridHeader() {        
        VisibleColumn($('#txtCustomCost2'), 6);
        VisibleColumn($('#txtCustomCost3'), 7);
        VisibleColumn($('#txtCustomCost4'), 8);
        VisibleColumn($('#txtCustomCost5'), 9);
        VisibleColumn($('#txtCustomCost6'), 10);
    }

    // show checked node IDs on datasource change
    function refreshGrid() {
        var checkedNodes = [],
            dropDownTree = $("#startsWith").data("kendoDropDownTree"),
            message;

        checkedNodeIds(dropDownTree.dataSource.view(), checkedNodes);

        if (checkedNodes.length > 0) {
            message = "IDs of checked nodes: " + checkedNodes.join(",");
        } else {
            message = "No nodes checked.";
        }
        $.ajax({
            url: '@Url.Action("TrialBalanceAccountsTree_Read", "Waterfall")',
            data: { selectedAccounts: checkedNodes },
            traditional: true,
            success: function (result) {
                searchResults = result;
            }
        }).done(function () {
            var dataSource = new kendo.data.DataSource({ data: searchResults });
            var grid = $('#accountsGrid').data("kendoGrid");
            dataSource.read();
            grid.setDataSource(dataSource);
            refreshGridHeader();
        });
    }

    function SubmitCosts() {
        var selectedCategoryOne = $("[data-selector='Column1']").filter(':checked').length;
        var selectedCategoryTwo = $("[data-selector='Column2']").filter(':checked').length;
        var selectedCategoryThree = $("[data-selector='Column3']").filter(':checked').length;
        if (selectedCategoryOne == 0 || selectedCategoryTwo == 0 || selectedCategoryThree == 0) {
            alert('At least one Direct Labor, Subcontractor Labor and Other Direct Costs is mandatory');
           
        }
        else
        {
            var checkedNodes = [],
                dropDownTree = $("#startsWith").data("kendoDropDownTree");
            var cost1Nodes = new Array();
            var cost2Nodes = new Array();
            var cost3Nodes = new Array();
            var cost4Nodes = new Array();
            var cost5Nodes = new Array();
            var cost6Nodes = new Array();
            var cost7Nodes = new Array();
            var cost8Nodes = new Array();

            $('[data-selector=Column1').each(function () {
                if ($(this).prop("checked")) {
                    cost1Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column2').each(function () {
                if ($(this).prop("checked")) {
                    cost2Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column3').each(function () {
                if ($(this).prop("checked")) {
                    cost3Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column4').each(function () {
                if ($(this).prop("checked")) {
                    cost4Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column5').each(function () {
                if ($(this).prop("checked")) {
                    cost5Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column6').each(function () {
                if ($(this).prop("checked")) {
                    cost6Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column7').each(function () {
                if ($(this).prop("checked")) {
                    cost7Nodes.push($(this).attr("data-item"));
                }
            });
            $('[data-selector=Column8').each(function () {
                if ($(this).prop("checked")) {
                    cost8Nodes.push($(this).attr("data-item"));
                }
            });


            checkedNodeIds(dropDownTree.dataSource.view(), checkedNodes);
            var cost1 = $('#txtDirectCost').val();
            var cost2 = $('#txtSubcontractorCost').val();
            var cost3 = $('#txtCustomCost1').val();
            var cost4 = $('#txtCustomCost2').val();
            var cost5 = $('#txtCustomCost3').val();
            var cost6 = $('#txtCustomCost4').val();
            var cost7 = $('#txtCustomCost5').val();
            var cost8 = $('#txtCustomCost6').val();

            var costs = {
                SelectedAccounts: checkedNodes,
                Cost1Name: cost1,
                Cost2Name: cost2,
                Cost3Name: cost3,
                Cost4Name: cost4,
                Cost5Name: cost5,
                Cost6Name: cost6,
                Cost7Name: cost7,
                Cost8Name: cost8,
                Cost1Nodes: cost1Nodes,
                Cost2Nodes: cost2Nodes,
                Cost3Nodes: cost3Nodes,
                Cost4Nodes: cost4Nodes,
                Cost5Nodes: cost5Nodes,
                Cost6Nodes: cost6Nodes,
                Cost7Nodes: cost7Nodes,
                Cost8Nodes: cost8Nodes
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("TrialBalanceCosts", "Waterfall")',
                data: costs,
                dataType: 'json'
            }).done(function (data) {
                window.location.replace('@Url.Action("GenerateWaterfall", "Waterfall")');
            }).fail(function (data) {
                debugger;
            });
        }
    }
</script>